import streamlit as st
import os
import shutil
import zipfile
from io import BytesIO
from backend import get_data, fill_invitations, merge_documents
import time
import atexit

# T·∫°o m·ªôt th∆∞ m·ª•c t·∫°m
TEMP_DIR = "temp_results"
os.makedirs(TEMP_DIR, exist_ok=True)

st.sidebar.title("C√†i ƒë·∫∑t Format")
selected_placeholder = st.sidebar.selectbox(
    "Ch·ªçn lo·∫°i ƒë·ªãnh d·∫°ng Placeholder:",
    options=["¬´Key_word¬ª", "[Key_word]", "¬´Key word¬ª", "[Key word]"]
)

file_prefix = st.sidebar.text_input(
    "Nh·∫≠p t√™n cho file:",
    value="Document"
)

save_option = st.sidebar.selectbox(
    "Ch·ªçn c√°ch l∆∞u:",
    options=["Nhi·ªÅu file", "M·ªôt file"]
)

isTest = st.sidebar.selectbox(
    "C√≥ ƒëang ch·∫°y th·ª≠ kh√¥ng (D√πng ƒë·ªÉ test th·ª≠ tr∆∞·ªõc 1 file):",
    options=["Kh√¥ng", "C√≥"]
)

percentage_text = st.sidebar.empty()
time_estimation_text = st.sidebar.empty()


# H√†m d·ªçn d·∫πp khi k·∫øt th√∫c
def cleanup_temp_folder():
    if os.path.exists(TEMP_DIR):
        shutil.rmtree(TEMP_DIR)  # X√≥a to√†n b·ªô th∆∞ m·ª•c t·∫°m


atexit.register(cleanup_temp_folder)

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("T·∫°o T√†i Li·ªáu T·ª± ƒê·ªông üìÑ")
st.write("**Upload file Excel v√† file Word ƒë·ªÉ t·∫°o t√†i li·ªáu!**")

# Upload file template Word
uploaded_template = st.file_uploader("Upload file Word (.docx) l√†m template", type=["docx"])
# Upload file d·ªØ li·ªáu Excel
uploaded_excel = st.file_uploader("Upload file Excel (.xlsx) ƒë·ªÉ l·∫•y d·ªØ li·ªáu", type=["xlsx"])

if uploaded_template and uploaded_excel:
    st.success("File ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng!")

    # L∆∞u file t·∫°m
    template_path = os.path.join(TEMP_DIR, "temp_template.docx")
    with open(template_path, "wb") as f:
        f.write(uploaded_template.getbuffer())

    excel_path = os.path.join(TEMP_DIR, "temp_data.xlsx")
    with open(excel_path, "wb") as f:
        f.write(uploaded_excel.getbuffer())

    # Th∆∞ m·ª•c ƒë·∫ßu ra
    output_folder = os.path.join(TEMP_DIR, "results")
    os.makedirs(output_folder, exist_ok=True)

    if st.button("B·∫Øt ƒë·∫ßu x·ª≠ l√Ω"):
        # ƒê·ªçc file Excel ƒë·ªÉ l·∫•y d·ªØ li·ªáu
        iterations, df, columns = get_data(excel_path)
        if isTest == "C√≥":
            iterations = 1

        # Thanh ti·∫øn tr√¨nh
        progress_bar = st.progress(0)

        start_time = time.time()  # B·∫Øt ƒë·∫ßu t√≠nh th·ªùi gian x·ª≠ l√Ω

        # X·ª≠ l√Ω t·ª´ng d√≤ng d·ªØ li·ªáu
        documents = []

        if save_option == "Nhi·ªÅu file":
            # Clear outputfolder
            for file in os.listdir(output_folder):
                file_path = os.path.join(output_folder, file)
                if os.path.isfile(file_path):
                    os.remove(file_path)

        for idx in range(iterations):
            data = {}
            row = df.iloc[idx, :]
            for column in columns:
                data[column.strip()] = row[column]

            # G·ªçi h√†m fill_invitations ƒë·ªÉ x·ª≠ l√Ω t·ª´ng t√†i li·ªáu
            doc = fill_invitations(template_path, data, selected_placeholder)
            if save_option == "Nhi·ªÅu file":
                file_path = os.path.join(output_folder, f"{file_prefix}{idx + 1}.docx")
                doc.save(file_path)
            else:
                documents.append(doc)

            # C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
            percentage_complete = int(((idx + 1) / iterations) * 100)
            progress_bar.progress(percentage_complete / 100)

            # Hi·ªÉn th·ªã ph·∫ßn trƒÉm ho√†n th√†nh
            percentage_text.text(f"ƒê√£ ho√†n th√†nh: {percentage_complete}%")

            # T√≠nh th·ªùi gian d·ª± ki·∫øn c√≤n l·∫°i
            elapsed_time = time.time() - start_time
            avg_time_per_file = elapsed_time / (idx + 1)
            estimated_time_left = avg_time_per_file * (iterations - idx - 1)
            time_estimation_text.text(f"Th·ªùi gian d·ª± ki·∫øn c√≤n l·∫°i: {round(estimated_time_left, 2)} gi√¢y")


        if save_option == "Nhi·ªÅu file":
              # T·∫°o file zip ƒë·ªÉ t·∫£i xu·ªëng
            zip_buffer = BytesIO()
            with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zipf:
                for root, dirs, files in os.walk(output_folder):
                    for file in files:
                        zipf.write(os.path.join(root, file), arcname=file)

            zip_buffer.seek(0)

            # Hi·ªÉn th·ªã n√∫t t·∫£i file zip
            st.sidebar.success("T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng! T·∫£i file zip b√™n d∆∞·ªõi:")
            st.sidebar.download_button(
                label="T·∫£i file ZIP üìÇ",
                data=zip_buffer,
                file_name="documents.zip",
                mime="application/zip"
            )
        else:
            # Merge all documents into a single document
            merged_doc = merge_documents(documents)

            # Save the merged document
            merged_output_path = os.path.join(output_folder, "merged_document.docx")
            merged_doc.save(merged_output_path)

            # ƒê·ªçc file ƒë√£ l∆∞u ƒë·ªÉ chu·∫©n b·ªã t·∫£i xu·ªëng
            with open(merged_output_path, "rb") as f:
                merged_doc_data = f.read()

            # Hi·ªÉn th·ªã n√∫t t·∫£i xu·ªëng file .docx
            st.sidebar.success("T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng! T·∫£i file .docx b√™n d∆∞·ªõi:")
            st.sidebar.download_button(
                label="T·∫£i file üìÑ",
                data=merged_doc_data,
                file_name=f"{file_prefix}.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )